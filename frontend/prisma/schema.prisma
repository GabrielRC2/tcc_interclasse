// Define database connection via the `DATABASE_URL` env var
datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// Define custom output path for generated Prisma Client
generator client {
  provider = "prisma-client-js"
}

// ------------------------------------------
// 1. ENTIDADES PRINCIPAIS
// ------------------------------------------

// Tabela: Torneio
model Torneio {
  id                 Int                 @id @default(autoincrement()) @map("id_torneio")
  nome               String              @map("nome_torneio")
  status             String              @map("status_torneio")
  inicio             DateTime            @map("inicio_torneio")
  fim                DateTime            @map("fim_torneio")
  times              Time[]
  grupos             Grupo[]
  partidas           Partida[]
  torneioModalidades TorneioModalidade[]

  @@map("Torneio")
}

// Tabela: Modalidade
model Modalidade {
  id                 Int                   @id @default(autoincrement()) @map("id_modalidade")
  nome               String                @map("nome_modalidade")
  categorias         Categoria[]
  grupos             Grupo[]
  partidas           Partida[]
  torneioModalidades TorneioModalidade[]

  @@map("Modalidade")
}

// Tabela: Categoria
model Categoria {
  id            Int        @id @default(autoincrement()) @map("id_categoria")
  nome          String     @map("nome_categoria")
  genero        String     @map("genero_categoria")
  modalidadeId  Int        @map("fk_id_modalidade")
  modalidade    Modalidade @relation(fields: [modalidadeId], references: [id])
  times         Time[]

  @@map("Categoria")
}

// Tabela: Curso
model Curso {
  id        Int       @id @default(autoincrement()) @map("id_curso")
  nome      String    @map("nome_curso")
  sigla     String    @unique @map("sigla_curso")
  jogadores Jogador[]
  times     Time[]

  @@map("Curso")
}

// Tabela: Jogador
model Jogador {
  id             Int             @id @default(autoincrement()) @map("id_jogador")
  nome           String          @map("nome_jogador")
  sala           String          @map("sala_jogador")
  genero         String          @map("genero_jogador")
  cursoId        Int             @map("fk_id_curso")
  curso          Curso           @relation(fields: [cursoId], references: [id])
  eventosPartida EventoPartida[]
  times          TimeJogador[]

  @@map("Jogador")
}

// Tabela: Time
model Time {
  id           Int            @id @default(autoincrement()) @map("id_time")
  nome         String         @map("nome_time")
  sala         String         @map("sala_time")
  cursoId      Int            @map("fk_id_curso")
  categoriaId  Int            @map("fk_id_categoria")
  torneioId    Int            @map("fk_id_torneio")
  curso        Curso          @relation(fields: [cursoId], references: [id])
  categoria    Categoria      @relation(fields: [categoriaId], references: [id])
  torneio      Torneio        @relation(fields: [torneioId], references: [id])
  jogadores    TimeJogador[]
  partidas     PartidaTime[]
  grupos       GrupoTime[]

  @@map("Time")
}

// Tabela: Grupo
model Grupo {
  id            Int         @id @default(autoincrement()) @map("id_grupo")
  nome          String      @map("nome_grupo")
  modalidadeId  Int         @map("fk_id_modalidade")
  torneioId     Int         @map("fk_id_torneio")
  modalidade    Modalidade  @relation(fields: [modalidadeId], references: [id])
  torneio       Torneio     @relation(fields: [torneioId], references: [id])
  partidas      Partida[]
  times         GrupoTime[]

  @@map("Grupo")
}

// Tabela: Local
model Local {
  id        Int       @id @default(autoincrement()) @map("id_local")
  nome      String    @map("nome_local")
  partidas  Partida[]

  @@map("Local")
}

// Tabela: Partida
model Partida {
  id               Int               @id @default(autoincrement()) @map("id_partida")
  dataHora         DateTime          @map("data_hora_partida")
  statusPartida    String            @map("status_partida")
  pontosCasa       Int?              @map("pontos_casa")
  pontosVisitante  Int?              @map("pontos_visitante")
  grupoId          Int?              @map("fk_id_grupo")
  localId          Int               @map("fk_id_local")
  torneioId        Int               @map("fk_id_torneio")
  modalidadeId     Int?              @map("fk_id_modalidade")
  genero           String?           @map("genero")
  tipo             String            @default("GRUPO") @map("tipo")
  fase             String?           @map("fase")
  ordem            Int?              @map("ordem")
  grupo            Grupo?            @relation(fields: [grupoId], references: [id])
  local            Local             @relation(fields: [localId], references: [id])
  torneio          Torneio           @relation(fields: [torneioId], references: [id])
  modalidade       Modalidade?       @relation(fields: [modalidadeId], references: [id])
  eventosPartida   EventoPartida[]
  times            PartidaTime[]

  @@map("Partida")
}

// Tabela: EventoPartida
model EventoPartida {
  id            Int      @id @default(autoincrement()) @map("id_evento")
  tipo          String   @map("tipo_evento")
  pontosGerados Int      @map("pontos_gerados")
  partidaId     Int      @map("fk_id_partida")
  jogadorId     Int      @map("fk_id_jogador")
  partida       Partida  @relation(fields: [partidaId], references: [id])
  jogador       Jogador  @relation(fields: [jogadorId], references: [id])

  @@map("EventoPartida")
}

// Tabela: Usuario
model Usuario {
  id        Int    @id @default(autoincrement()) @map("id_usuario")
  nome      String @map("nome_usuario")
  email     String @unique @map("email_usuario")
  senhaHash String @map("senha_hash")

  @@map("Usuario")
}

// ----------------------------------------------------
// 2. TABELAS ASSOCIATIVAS (RELACIONAMENTOS N:M)
// ----------------------------------------------------

// Tabela: Torneio_Modalidades
model TorneioModalidade {
  torneioId    Int @map("fk_id_torneio")
  modalidadeId Int @map("fk_id_modalidade")
  torneio      Torneio    @relation(fields: [torneioId], references: [id])
  modalidade   Modalidade @relation(fields: [modalidadeId], references: [id])

  @@id([torneioId, modalidadeId])
  @@map("Torneio_Modalidades")
}

// Tabela: Grupo_Times
model GrupoTime {
  grupoId Int   @map("fk_id_grupo")
  timeId  Int   @map("fk_id_time")
  grupo   Grupo @relation(fields: [grupoId], references: [id])
  time    Time  @relation(fields: [timeId], references: [id])

  @@id([grupoId, timeId])
  @@map("GrupoTime")
}

// Tabela: Time_Jogadores
model TimeJogador {
  timeId       Int     @map("fk_id_time")
  jogadorId    Int     @map("fk_id_jogador")
  numeroCamisa Int     @map("numero_camisa")
  time         Time    @relation(fields: [timeId], references: [id])
  jogador      Jogador @relation(fields: [jogadorId], references: [id])

  @@id([timeId, jogadorId])
  @@map("Time_Jogadores")
}

// Tabela: Partida_Times
model PartidaTime {
  partidaId       Int     @map("fk_id_partida")
  timeId          Int     @map("fk_id_time")
  ehCasa          Boolean @map("eh_casa")
  resultado       String  @default("PENDENTE") @map("resutado_partida") // VENCEDOR, PERDEDOR, WO, EMPATE, PENDENTE
  pontosTorneio   Int     @default(0) @map("pontos_torneio")
  partida         Partida @relation(fields: [partidaId], references: [id])
  time            Time    @relation(fields: [timeId], references: [id])

  @@id([partidaId, timeId])
  @@map("PartidaTime")
}