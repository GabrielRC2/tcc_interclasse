// Este é o seu arquivo de esquema Prisma.
// Saiba mais em https://pris.ly/d/prisma-schema

// 1. Define o gerador de cliente. O Prisma Client é o ORM que você usará no seu código.
generator client {
  provider = "prisma-client-js"
}

// 2. Define a fonte de dados. Aqui, configuramos para usar MySQL.
//    Você precisará definir a variável de ambiente DATABASE_URL no seu arquivo .env.
datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

// Adicione esta parte logo depois do datasource db
enum TipoUsuario {
  ADMIN
  STAFF  
  REPRESENTANTE
}

// ------------------------------------------
// 1. ENTIDADES PRINCIPAIS
// ------------------------------------------

// Tabela: Torneio
// Descrição: Armazena as informações gerais sobre cada torneio.
model Torneio {
  id                 Int                 @id @default(autoincrement()) @map("id_torneio")
  nome               String              @map("nome_torneio") @db.VarChar(200)
  status             String              @map("status_torneio") @db.VarChar(20)
  inicio             DateTime            @map("inicio_torneio") @db.DateTime
  fim                DateTime            @map("fim_torneio") @db.DateTime
  times              Time[]              // ADICIONAR ESTA LINHA
  grupos             Grupo[]
  partidas           Partida[]
  torneioModalidades TorneioModalidade[]

  @@map("Torneio")
}

// Tabela: Modalidade
// Descrição: Define as modalidades esportivas ou de jogos.
model Modalidade {
  id                 Int                   @id @default(autoincrement()) @map("id_modalidade")
  nome               String                @map("nome_modalidade") @db.VarChar(50)
  categorias         Categoria[]
  grupos             Grupo[]
  partidas           Partida[]             // Para partidas eliminatórias
  torneioModalidades TorneioModalidade[]

  @@map("Modalidade")
}

// Tabela: Categoria
// Descrição: Define as categorias dentro de cada modalidade.
model Categoria {
  id            Int      @id @default(autoincrement()) @map("id_categoria")
  nome          String   @map("nome_categoria") @db.VarChar(50)
  genero        String   @map("genero_categoria") @db.VarChar(10) // ADICIONAR ESTA LINHA
  modalidadeId  Int      @map("fk_id_modalidade")
  modalidade    Modalidade @relation(fields: [modalidadeId], references: [id])
  times         Time[]

  @@map("Categoria")
}

// Tabela: Curso
// Descrição: Armazena os cursos de origem dos jogadores.
model Curso {
  id      Int       @id @default(autoincrement()) @map("id_curso")
  nome    String    @map("nome_curso") @db.VarChar(100)
  sigla   String    @unique @map("sigla_curso") @db.VarChar(10)
  jogadores Jogador[]
  times     Time[]

  @@map("Curso")
}

// Tabela: Jogador
// Descrição: Armazena os dados da pessoa que joga.
model Jogador {
  id             Int             @id @default(autoincrement()) @map("id_jogador")
  nome           String          @map("nome_jogador") @db.VarChar(70)
  sala           String          @map("sala_jogador") @db.VarChar(10)
  genero         String          @map("genero_jogador") @db.VarChar(10) // NOVO CAMPO
  cursoId        Int             @map("fk_id_curso")
  curso          Curso           @relation(fields: [cursoId], references: [id])
  eventosPartida EventoPartida[]
  times          TimeJogador[]

  @@map("Jogador")
}

// Tabela: Time
// Descrição: Define uma equipe específica.
model Time {
  id           Int            @id @default(autoincrement()) @map("id_time")
  nome         String         @map("nome_time") @db.VarChar(100)
  sala         String         @map("sala_time") @db.VarChar(10)
  cursoId      Int            @map("fk_id_curso")
  categoriaId  Int            @map("fk_id_categoria")
  torneioId    Int            @map("fk_id_torneio") // ADICIONAR ESTA LINHA
  curso        Curso          @relation(fields: [cursoId], references: [id])
  categoria    Categoria      @relation(fields: [categoriaId], references: [id])
  torneio      Torneio        @relation(fields: [torneioId], references: [id]) // ADICIONAR ESTA LINHA
  jogadores    TimeJogador[]
  partidas     PartidaTime[]
  grupos       GrupoTime[]

  @@map("Time")
}

// Tabela: Grupo
// Descrição: Organiza os times dentro de um torneio.
model Grupo {
  id            Int         @id @default(autoincrement()) @map("id_grupo")
  nome          String      @map("nome_grupo") @db.VarChar(50)
  modalidadeId  Int         @map("fk_id_modalidade")
  torneioId     Int         @map("fk_id_torneio")
  modalidade    Modalidade  @relation(fields: [modalidadeId], references: [id])
  torneio       Torneio     @relation(fields: [torneioId], references: [id])
  partidas      Partida[]
  times         GrupoTime[]

  @@map("Grupo")
}

// Tabela: Local
// Descrição: Armazena os locais onde as partidas podem acontecer.
model Local {
  id        Int       @id @default(autoincrement()) @map("id_local")
  nome      String    @map("nome_local") @db.VarChar(100)
  partidas  Partida[]

  @@map("Local")
}

// Tabela: Partida
// Descrição: Registra cada partida que ocorre.
model Partida {
  id               Int               @id @default(autoincrement()) @map("id_partida")
  dataHora         DateTime          @map("data_hora_partida") @db.DateTime
  statusPartida    String            @map("status_partida") @db.VarChar(20)
  pontosCasa       Int?              @map("pontos_casa")
  pontosVisitante  Int?              @map("pontos_visitante")
  grupoId          Int?              @map("fk_id_grupo") // Opcional para partidas eliminatórias
  localId          Int               @map("fk_id_local")
  torneioId        Int               @map("fk_id_torneio")
  modalidadeId     Int               @map("fk_id_modalidade")
  genero           String            @map("genero") @db.VarChar(10)
  tipo             String            @default("GRUPO") @map("tipo") @db.VarChar(20) // GRUPO ou ELIMINATORIA
  fase             String?           @map("fase") @db.VarChar(50) // Ex: "Oitavas de Final", "Quartas", etc.
  ordem            Int?              @map("ordem") // Ordem da partida no torneio
  grupo            Grupo?            @relation(fields: [grupoId], references: [id])
  local            Local             @relation(fields: [localId], references: [id])
  torneio          Torneio           @relation(fields: [torneioId], references: [id])
  modalidade       Modalidade        @relation(fields: [modalidadeId], references: [id])
  eventosPartida   EventoPartida[]
  times            PartidaTime[]     // ADICIONADO: relacionamento com times

  @@map("Partida")
}

// Tabela: EventoPartida
// Descrição: Registra eventos específicos durante uma partida.
model EventoPartida {
  id            Int      @id @default(autoincrement()) @map("id_evento")
  tipo          String   @map("tipo_evento") @db.VarChar(30)
  pontosGerados Int      @map("pontos_gerados")
  partidaId     Int      @map("fk_id_partida")
  jogadorId     Int      @map("fk_id_jogador")
  partida       Partida  @relation(fields: [partidaId], references: [id])
  jogador       Jogador  @relation(fields: [jogadorId], references: [id])

  @@map("EventoPartida")
}

// Tabela: Usuario
// Descrição: Controla o acesso ao sistema.
model Usuario {
  id_usuario    Int         @id @default(autoincrement()) @map("id_usuario")
  nome_usuario  String      @map("nome_usuario") @db.VarChar(100)
  email_usuario String      @unique @map("email_usuario") @db.VarChar(255)
  senha_hash    String      @map("senha_hash") @db.VarChar(255)
  tipo_usuario  TipoUsuario @map("tipo_usuario")
  createdAt     DateTime    @default(now()) @map("created_at")
  updatedAt     DateTime    @updatedAt @map("updated_at")

  @@map("Usuario")
}


// ----------------------------------------------------
// 2. TABELAS ASSOCIATIVAS (RELACIONAMENTOS N:M)
// ----------------------------------------------------

// Tabela: Torneio_Modalidades
// Descrição: Associa Torneios a Modalidades.
model TorneioModalidade {
  torneioId    Int @map("fk_id_torneio")
  modalidadeId Int @map("fk_id_modalidade")
  torneio      Torneio    @relation(fields: [torneioId], references: [id])
  modalidade   Modalidade @relation(fields: [modalidadeId], references: [id])

  @@id([torneioId, modalidadeId])
  @@map("Torneio_Modalidades")
}

// Tabela: Grupo_Times
// Descrição: Define quais Times pertencem a quais Grupos.
model GrupoTime {
  grupoId Int   @map("fk_id_grupo")
  timeId  Int   @map("fk_id_time")
  grupo   Grupo @relation(fields: [grupoId], references: [id])
  time    Time  @relation(fields: [timeId], references: [id])

  @@id([grupoId, timeId])
  @@map("GrupoTime")
}

// Tabela: Time_Jogadores
// Descrição: Representa a inscrição de um Jogador em um Time específico.
model TimeJogador {
  timeId       Int     @map("fk_id_time")
  jogadorId    Int     @map("fk_id_jogador")
  numeroCamisa Int     @map("numero_camisa")
  time         Time    @relation(fields: [timeId], references: [id])
  jogador      Jogador @relation(fields: [jogadorId], references: [id])

  @@id([timeId, jogadorId])
  @@map("Time_Jogadores")
}

// Tabela: Partida_Times
// Descrição: Registra os Times que disputam uma Partida.
model PartidaTime {
  partidaId       Int     @map("fk_id_partida")
  timeId          Int     @map("fk_id_time")
  ehCasa          Boolean @map("eh_casa") // true = casa, false = visitante
  resultado       String  @default("PENDENTE") @map("resutado_partida") // VENCEDOR, PERDEDOR, WO, EMPATE, PENDENTE
  pontosTorneio   Int     @default(0) @map("pontos_torneio") // Pontos ganhos no torneio (3-1-0)
  partida         Partida @relation(fields: [partidaId], references: [id])
  time            Time    @relation(fields: [timeId], references: [id])

  @@id([partidaId, timeId])
  @@map("PartidaTime")
}