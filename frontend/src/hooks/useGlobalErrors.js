'use client';
import { useEffect } from 'react';
import { useToast } from '@/components/Toast';
import { useRouter } from 'next/navigation';

// Hook expandido para tratar todos os erros globais
export function useGlobalErrors() {
    const toast = useToast();
    const router = useRouter();

    useEffect(() => {
        // 1. EVENTOS DE INTERNET (j√° implementado)
        const handleOffline = () => {
            toast.error('üîå Sem conex√£o com a internet. Verifique sua conex√£o.');
        };

        const handleOnline = () => {
            toast.success('‚úÖ Conex√£o com a internet restaurada.');
        };

        // 2. INTERCEPTADOR GLOBAL DE FETCH
        const originalFetch = window.fetch;

        window.fetch = async (...args) => {
            try {
                const response = await originalFetch(...args);

                // Tratar c√≥digos de erro HTTP automaticamente
                if (!response.ok) {
                    const url = args[0];
                    const operation = extractOperationFromUrl(url);

                    switch (response.status) {
                        case 401:
                            toast.error('üîë Sess√£o expirada. Voc√™ ser√° redirecionado...');
                            // Como o app usa componentes e n√£o URLs, voc√™ pode:
                            // Op√ß√£o 1: Limpar localStorage/sessionStorage
                            localStorage.clear();
                            sessionStorage.clear();
                            // Op√ß√£o 2: Recarregar a p√°gina para for√ßar novo login
                            setTimeout(() => {
                                window.location.reload();
                            }, 2000);
                            // Op√ß√£o 3: Emitir evento customizado para sidebar tratar
                            // window.dispatchEvent(new CustomEvent('forceLogout'));
                            break;

                        case 403:
                            toast.error('üõ°Ô∏è Voc√™ n√£o tem permiss√£o para esta opera√ß√£o.');
                            break;

                        case 404:
                            toast.error(`‚ùì Recurso n√£o encontrado${operation ? ` para ${operation}` : ''}.`);
                            break;

                        case 408:
                            toast.error('‚è±Ô∏è Timeout: A opera√ß√£o demorou muito. Tente novamente.');
                            break;

                        case 409:
                            toast.error('‚ö†Ô∏è Conflito: Esta opera√ß√£o n√£o pode ser realizada no momento.');
                            break;

                        case 422:
                            toast.error('üìã Dados inv√°lidos. Verifique os campos preenchidos.');
                            break;

                        case 429:
                            toast.error('‚è±Ô∏è Muitas tentativas. Aguarde um momento e tente novamente.');
                            break;

                        case 500:
                        case 502:
                        case 503:
                        case 504:
                            toast.error('üîß Erro interno do servidor. Tente novamente em alguns minutos.');
                            break;

                        default:
                            if (response.status >= 400) {
                                toast.error(`‚ùå Erro ${response.status}: Falha na${operation ? ` ${operation}` : ' opera√ß√£o'}.`);
                            }
                    }
                }

                return response;

            } catch (error) {
                // Tratar erros de rede e timeout
                if (error.name === 'AbortError') {
                    toast.error('‚è±Ô∏è Opera√ß√£o cancelada por timeout.');
                } else if (error.name === 'TypeError' && error.message.includes('fetch')) {
                    toast.error('üîå Erro de conex√£o. Verifique sua internet.');
                } else if (error.message.includes('NetworkError')) {
                    toast.error('üåê Erro de rede. Tente novamente.');
                } else {
                    // S√≥ mostra erro gen√©rico se n√£o foi um erro HTTP j√° tratado
                    console.error('Erro de fetch n√£o tratado:', error);
                    toast.error('‚ùå Erro inesperado. Tente novamente.');
                }

                throw error; // Re-lan√ßa para o c√≥digo original tratar se necess√°rio
            }
        };

        // 3. ADICIONAR TIMEOUT AUTOM√ÅTICO (opcional)
        const originalFetchWithTimeout = window.fetch;
        window.fetch = (url, options = {}) => {
            const timeoutMs = options.timeout || 30000; // 30 segundos padr√£o

            const controller = new AbortController();
            const timeoutId = setTimeout(() => controller.abort(), timeoutMs);

            return originalFetchWithTimeout(url, {
                ...options,
                signal: controller.signal
            }).finally(() => {
                clearTimeout(timeoutId);
            });
        };

        // 4. LISTENERS DE EVENTOS
        window.addEventListener('offline', handleOffline);
        window.addEventListener('online', handleOnline);

        // 5. INTERCEPTAR ERROS N√ÉO CAPTURADOS
        const handleUnhandledError = (event) => {
            console.error('Erro global n√£o capturado:', event.error);
            toast.error('‚ùå Erro inesperado na aplica√ß√£o.');
        };

        const handleUnhandledRejection = (event) => {
            console.error('Promise rejeitada n√£o capturada:', event.reason);
            toast.error('‚ùå Erro inesperado em opera√ß√£o ass√≠ncrona.');
            event.preventDefault(); // Previne que apare√ßa no console
        };

        window.addEventListener('error', handleUnhandledError);
        window.addEventListener('unhandledrejection', handleUnhandledRejection);

        // CLEANUP
        return () => {
            window.fetch = originalFetch; // Restaura fetch original
            window.removeEventListener('offline', handleOffline);
            window.removeEventListener('online', handleOnline);
            window.removeEventListener('error', handleUnhandledError);
            window.removeEventListener('unhandledrejection', handleUnhandledRejection);
        };
    }, [toast, router]);
}

// Fun√ß√£o auxiliar para extrair tipo de opera√ß√£o da URL
function extractOperationFromUrl(url) {
    if (typeof url !== 'string') return null;

    if (url.includes('/api/teams')) return 'times';
    if (url.includes('/api/jogadores')) return 'jogadores';
    if (url.includes('/api/partidas')) return 'partidas';
    if (url.includes('/api/grupos')) return 'grupos';
    if (url.includes('/api/eliminatorias')) return 'eliminat√≥rias';
    if (url.includes('/api/torneios')) return 'torneios';
    if (url.includes('/api/classificacao')) return 'classifica√ß√£o';
    if (url.includes('/api/modalidades')) return 'modalidades';
    if (url.includes('/api/users')) return 'usu√°rios';

    return null;
}

// Manter compatibilidade com c√≥digo existente
export function useInternetStatus() {
    return useGlobalErrors();
}